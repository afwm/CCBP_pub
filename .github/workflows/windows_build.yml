name: Build Windows Application

on:
  push:
    branches: [ "main", "features" ] # main と develop ブランチへの push で実行 (適宜変更)
  pull_request:
    branches: [ "main" ] # main ブランチへの PR でも実行
  workflow_dispatch: # 手動実行も可能にする

permissions:
  contents: read # コードのチェックアウトに必要

jobs:
  build_windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0 # Fetch full history for LFS

    - name: Pull LFS objects
      run: git lfs pull
      shell: bash

    - name: Check LFS files after pull
      run: |
        echo "--- Checking assets/ffmpeg/win/ after git lfs pull ---"
        ls -lR assets/ffmpeg/win/ || echo "Directory assets/ffmpeg/win/ not found or ls failed."
        echo "-------------------------------------------------------"
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install ccache
      run: choco install ccache --no-progress
      shell: powershell

    - name: Configure pip cache
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Configure ccache
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\ccache\Cache
        key: ${{ runner.os }}-ccache-${{ hashFiles('main.py', 'ccbp/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install project dependencies (including dev for Nuitka)
        pip install .[dev] 
      shell: powershell

    - name: List installed packages
      run: pip freeze
      shell: powershell

    # --- prepare_build.py の代替: config.json を生成 ---
    - name: Generate config.json from Secrets
      env:
        # Secretsを環境変数経由でPowerShellに渡す必要はない
        # PowerShellスクリプト内で直接 ${{ secrets.VAR_NAME }} を展開できる
        PYTHONIOENCODING: utf-8
      shell: powershell
      run: |
        # デフォルト設定（ConfigManagerのDEFAULT_CONFIGに相当する部分）
        $config = @{
            "working_directory" = ""
            "license_key" = "" # 暗号化されるためデフォルトは空
            "license.status" = $null
            "license.expires" = $null
            "license.validated_at" = $null
            "license.last_message" = "未確認"
            "batch/csv_file" = ""
            "batch/template_dir" = ""
            "batch/template_material_dir" = ""
            "batch/replace_material_dir" = ""
            "batch/output_dir" = ""
            "batch/output_csv_dir" = ""
            "crop_input_dir" = ""
            "crop_output_dir" = ""
            "license/api_url" = "${{ secrets.LICENSE_API_URL }}" # Secretから取得
            "license/secret_key" = "${{ secrets.LICENSE_SECRET_KEY }}" # Secretから取得
            "license/fernet_key" = "${{ secrets.LICENSE_FERNET_KEY }}" # Secretから取得
            "internal/fernet_key" = "" # 初回起動時にConfigManagerが生成するため空
        }
        # JSON形式に変換してファイルに書き出す
        $configJson = $config | ConvertTo-Json -Depth 5 
        # UTF-8 (BOMなし) で保存
        $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
        [System.IO.File]::WriteAllLines('config.json', $configJson, $Utf8NoBomEncoding)
        
        Write-Host "config.json generated successfully:"
        Get-Content config.json

    # --- Nuitka ビルド ---
    - name: Build application with Nuitka
      working-directory: ${{ github.workspace }}
      env:
        USE_CCACHE: 1
        CCACHE_DIR: $env:USERPROFILE/AppData/Local/ccache/Cache # PowerShell形式
        PATH: 'C:\ProgramData\chocolatey\lib\ccache\tools;${{ env.PATH }}' # <- シングルクォートに変更
      run: |
        echo "--- Checking config.json before Nuitka build ---"
        ls -l config.json
        cat config.json # For debugging
        echo "-------------------------------------------------"
        
        python -m nuitka `
          --standalone `
          --output-dir=nuitka_dist_windows `
          --remove-output `
          --windows-icon-from-ico=assets/icons/app.ico `
          --enable-plugin=pyside6 `
          --include-package=ccbp `
          --include-package=PySide6 `
          --include-qt-plugins=all `
          --include-data-dir=assets=assets `
          --include-data-file=assets/ffmpeg/win/ffmpeg.exe=assets/ffmpeg/win/ffmpeg.exe `
          --include-data-file=assets/ffmpeg/win/ffprobe.exe=assets/ffmpeg/win/ffprobe.exe `
          --include-data-file=config.json=config.json `
          # --include-data-file=qt6.conf=qt6.conf # 不要になったため削除
          --product-name="CapCutBatchProcessor" `
          --company-name="MASHUL-LAB" `
          --product-version="1.0.0" `
          --file-version="1.0.0" `
          --assume-yes-for-downloads `
          --follow-imports `
          main.py
      shell: powershell # Nuitka コマンドも PowerShell で実行

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: CapCutBatchProcessor-Windows
        path: nuitka_dist_windows/main.dist/ # Nuitka の standalone 出力ディレクトリ 